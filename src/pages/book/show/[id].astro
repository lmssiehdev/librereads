---
import Star from "../../../components/icons/star.astro";
import Layout from "../../../layouts/Layout.astro";
import {
  fetchBookDataByLegacyId,
  fetchBookRelatedData,
} from "../../../utils/graphql";
import { cn, setCache } from "../../../utils/misc";
import BookLists from "../_components/BookLists.astro";
import BookReviews from "../_components/BookReviews.astro";
import BookSerie from "../_components/BookSerie.astro";
import BooksByAuthor from "../_components/BooksByAuthor.astro";
import SimilarBooks from "../_components/SimilarBooks.astro";

const { id } = Astro.params;

const bookInfo = await fetchBookDataByLegacyId(id as string);

if (!bookInfo) {
  return Astro.redirect("/404");
}

const authorId = bookInfo?.getBookByLegacyId?.primaryContributorEdge?.node?.id;

const hasSeries = bookInfo.getBookByLegacyId.bookSeries.length > 0;
const seriesData = hasSeries
  ? {
      title: bookInfo.getBookByLegacyId.bookSeries[0].series.title,
      id: bookInfo.getBookByLegacyId.bookSeries[0].series.id,
      url: bookInfo.getBookByLegacyId.bookSeries[0].series.webUrl,
    }
  : undefined;

const result = await fetchBookRelatedData({
  bookId: bookInfo.getBookByLegacyId.id,
  seriesId: seriesData?.id || "",
  authorId: authorId,
});

setCache(Astro.response.headers);

const goodreadsGraphqlId = bookInfo?.getBookByLegacyId?.id;
const authorName =
  bookInfo.getBookByLegacyId.primaryContributorEdge?.node?.name;
const authorLegacyId =
  bookInfo?.getBookByLegacyId?.primaryContributorEdge?.node?.legacyId;
const data = bookInfo.getBookByLegacyId;

const metadata = {
  title: `${data.title} by ${authorName}`,
  description: `${data.descriptionStripped.substring(0, 153).trim()}...`,
};
---

<Layout metadata={metadata}>
  <div class="flex gap-4">
    <div class="flex-1 h-[250px] max-w-[175px] w-full overflow-hidden rounded">
      <img
        src={data.imageUrl}
        alt={data.title}
        class="w-full h-full object-fill"
      />
    </div>
    <div class="flex-1">
      <div class="text-3xl">
        <div class="text-sm text-black text-opacity-70">
          {
            hasSeries && (
              <>
                #{bookInfo.getBookByLegacyId.bookSeries[0].userPosition}{" "}
                {bookInfo.getBookByLegacyId.bookSeries[0].series.title}
              </>
            )
          }
        </div>
        <h1>{data.title}</h1>
      </div>
      <a
        href=`/author/show/${data.primaryContributorEdge.node.legacyId}`
        class="text-black text-opacity-70"
      >
        {authorName}
      </a>
      <div class="my-1">
        <div class="flex gap-1.5 mb-1">
          <div class="flex items-center gap-0.5">
            {
              Array.from({ length: 5 }).map((_, i) => {
                return (
                  <Star
                    class={cn("size-5", [
                      data.work.stats.averageRating < i + 1
                        ? "text-inherit"
                        : "text-yellow-400",
                    ])}
                  />
                );
              })
            }
          </div>
          <span class="text-xl">
            {data.work.stats.averageRating}
          </span>
        </div>
        <div class="text-sm text-black text-opacity-70">
          <span>
            {data.work.stats.ratingsCount.toLocaleString("en-US")} ratings
          </span>
          <span>
            {data.work.stats.textReviewsCount.toLocaleString("en-US")} reviews
          </span>
        </div>
      </div>
      <div class="line-clamp-4" set:html={data.descriptionStripped} />
      <div class="my-2">
        Genres:
        {
          data.bookGenres.map(({ genre }) => {
            return <span class="underline mx-1">{genre.name}</span>;
          })
        }
      </div>
      <div class="text-slate-500">
        {data.details.numPages} Pages
      </div>
      <div class="my-8">
        <BookReviews
          bookId={goodreadsGraphqlId}
          ratingsCountDist={data.work.stats.ratingsCountDist}
        />
      </div>
    </div>
  </div>
  <div class="my-5">
    <SimilarBooks data={result?.getSimilarBooks!} />
  </div>
  <div class="my-5">
    <BooksByAuthor
      data={result?.getWorksByContributor!}
      author={{ name: authorName, id: authorLegacyId.toString() }}
    />
  </div>
  <div class="my-5">
    {
      seriesData && (
        <BookSerie data={result?.getWorksForSeries!} series={seriesData} />
      )
    }
  </div>
  <div class="my-5">
    <BookLists bookId={id!} data={result?.getBookListsOfBook!} />
  </div>
</Layout>
