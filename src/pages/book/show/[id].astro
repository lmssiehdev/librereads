---
import AmazonLinks from "../../../components/amazon-links.astro";
import Star from "../../../components/icons/star.astro";
import Layout from "../../../layouts/Layout.astro";
import {
	fetchBookDataByLegacyId,
	fetchBookRelatedData,
} from "../../../utils/graphql";
import { cn, setCache } from "../../../utils/misc";
import type { GetBookByLegacyIdSchema } from "../../../utils/query/getBookByLegacyId";
import BookLists from "../_components/BookLists.astro";
import BookReviews from "../_components/BookReviews.astro";
import BookSerie from "../_components/BookSerie.astro";
import BooksByAuthor from "../_components/BooksByAuthor.astro";
import SimilarBooks from "../_components/SimilarBooks.astro";

const { id } = Astro.params;

const bookInfo = await fetchBookDataByLegacyId(id as string);

if (!bookInfo) {
	return Astro.redirect("/404");
}

function getBookData(bookInfo: GetBookByLegacyIdSchema["getBookByLegacyId"]) {
	if (!bookInfo) return;

	const hasSeries = bookInfo.bookSeries.length > 0;
	const seriesData = hasSeries
		? {
				title: bookInfo.bookSeries[0].series.title,
				id: bookInfo.bookSeries[0].series.id,
				url: bookInfo.bookSeries[0].series.webUrl,
			}
		: undefined;

	const goodreadsGraphqlId = bookInfo?.id;
	const stats = bookInfo.work.stats;
	const {
		name: authorName,
		id: authorId,
		legacyId: authorLegacyId,
	} = bookInfo.primaryContributorEdge.node;

	return {
		hasSeries,
		goodreadsGraphqlId,
		author: {
			id: authorId,
			name: authorName,
			legacyId: authorLegacyId,
		},
		rating: {
			averageRating: stats.averageRating,
			ratingsCount: stats.ratingsCount,
			textReviewsCount: stats.textReviewsCount,
			ratingsCountDist: stats.ratingsCountDist,
		},
		series: seriesData,
		metadata: {
			title: `${bookInfo.title} by ${authorName}`,
			description: `${bookInfo.descriptionStripped
				?.substring(0, 153)
				.trim()}...`,
		},
	} as const;
}

const cleanBookData = getBookData(bookInfo.getBookByLegacyId);

if (!cleanBookData) {
	return Astro.redirect("/404");
}

const { goodreadsGraphqlId, author, series, metadata, hasSeries } =
	cleanBookData;

const result = await fetchBookRelatedData({
	bookId: bookInfo.getBookByLegacyId.id,
	seriesId: series?.id || "",
	authorId: author.id,
});

setCache(Astro.response.headers);

const data = bookInfo.getBookByLegacyId;
---

<Layout metadata={metadata}>
  <div class="flex flex-col sm:flex-row gap-4">
    <div class="flex-1 h-[250px] max-w-[175px] mx-auto">
      <div class="w-full overflow-hidden rounded mb-2">
        <img
          src={data.imageUrl}
          alt={data.title}
          class="w-full h-full object-fill"
        />
      </div>
      <AmazonLinks data={data.links} />
    </div>
    <div class="flex-1">
      <div class="text-3xl">
        <div class="text-sm text-black text-opacity-70">
          {
            hasSeries && (
              <>
                #{data.bookSeries[0].userPosition}{" "}
                {data.bookSeries[0].series.title}
              </>
            )
          }
        </div>
        <h1>{data.title}</h1>
      </div>
      <a
        href=`/author/show/${author.legacyId}`
        class="text-black text-opacity-70"
      >
        {author.name}
      </a>
      <div class="my-1">
        <div class="flex gap-1.5 mb-1">
          <div class="flex items-center gap-0.5">
            {
              Array.from({ length: 5 }).map((_, i) => {
                return (
                  <Star
                    class={cn("size-5", [
                      data.work.stats.averageRating < i + 1
                        ? "text-inherit"
                        : "text-yellow-400",
                    ])}
                  />
                );
              })
            }
          </div>
          <span class="text-xl">
            {cleanBookData.rating.averageRating}
          </span>
        </div>
        <div class="text-sm text-black text-opacity-70">
          <span>
            {cleanBookData.rating.ratingsCount.toLocaleString("en-US")} ratings
          </span>
          <span>
            {cleanBookData.rating.textReviewsCount.toLocaleString("en-US")} reviews
          </span>
        </div>
      </div>
      <div class="line-clamp-4" set:html={data.descriptionStripped} />
      <div class="my-2">
        Genres:
        {
          data.bookGenres.map(({ genre }) => {
            return <span class="underline mx-1">{genre.name}</span>;
          })
        }
      </div>
      <div class="text-slate-500">
        {data.details.numPages} Pages
      </div>
      <div class="my-8">
        <BookReviews
          bookId={goodreadsGraphqlId}
          ratingsCountDist={data.work.stats.ratingsCountDist}
        />
      </div>
    </div>
  </div>
  <div class="my-14">
    <SimilarBooks data={result?.getSimilarBooks!} bookId={id!} />
  </div>
  <div class="my-14">
    <BooksByAuthor data={result?.getWorksByContributor!} author={author} />
  </div>
  <div class="my-14">
    {series && <BookSerie data={result?.getWorksForSeries!} series={series} />}
  </div>
  <div class="my-14">
    <BookLists bookId={id!} data={result?.getBookListsOfBook!} />
  </div>
</Layout>
