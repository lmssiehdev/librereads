---
import BookCard from "../../../components/book-card.astro";
import LinkWithArrow from "../../../components/ui/link-with-arrow.astro";
import { extractSeriesId } from "../../../utils/goodreads";
import type { GetWorkForSeries } from "../../../utils/query/getWorksForSeries";

interface Props {
  data: GetWorkForSeries["getWorksForSeries"];
  series: {
    url: string;
    title: string;
  };
}

const { data, series } = Astro.props;

const seriesData = data?.edges;
---

<div>
  <h3 class="text-lg mb-4">
    {series.title} Series
  </h3>
  <div class="grid grid-cols-3 sm:grid-cols-4 [&:nth-child(4)]:hidden gap-4">
    {
      seriesData.map((work) => {
        const {
          stats: { averageRating },
          bestBook: {
            title,
            imageUrl,
            webUrl,
            legacyId: bookId,
            primaryContributorEdge,
          },
        } = work.node;
        const seriesPlacement = work.seriesPlacement;
        const { name: authorName, legacyId: authorId } =
          primaryContributorEdge.node;
        return (
          <BookCard
            class="[&:nth-child(4)]:hidden sm:[&:nth-child(4)]:block"
            payload={{
              seriesPlacement,
              authorId,
              authorName,
              averageRating,
              imageUrl,
              title,
              webUrl,
              bookId,
            }}
          />
        );
      })
    }
  </div>
  <LinkWithArrow url={`/series/${extractSeriesId(series.url)}`}>
    All books in this series
  </LinkWithArrow>
</div>
